import React, { useState, useEffect } from 'react';
import { GoogleMap, LoadScript, Marker, DirectionsService, DirectionsRenderer } from '@react-google-maps/api';

const containerStyle = {
  width: '100%',
  height: '650px',
};

const center = {
  lat: 28.3949,
  lng: 84.1240,
};

const hotels = [
  { name: 'EV-APLHA CHARGING SPORT', location: { lat: 27.7075, lng: 85.3202 } },
  { name: 'EV-BBC CHARGING SPORT', location: { lat: 27.6724, lng: 85.4250 } },
  { name: 'EV-MAHAD CHARGING SPORT', location: { lat: 27.6707, lng: 85.3622 } },
  { name: 'EV-CORE CHARGING SPORT', location: { lat: 27.6726, lng: 85.4278 } },
  { name: 'EV-ASTAPUR CHARGING SPORT', location: { lat: 27.6728, lng: 85.4256 } },
  { name: 'EV-RAITNE CHARGING SPORT', location: { lat: 27.6729, lng: 85.4223 } },
  // Add more hotel locations here
];

function NepalMap() {
  const [map, setMap] = useState(null);
  const [directions, setDirections] = useState(null);
  const [userLocation, setUserLocation] = useState(null);
  const [selectedHotel, setSelectedHotel] = useState(null);

  const onMapLoad = mapInstance => {
    setMap(mapInstance);
  };

  const calculateDirections = (origin, destination) => {
    const directionsService = new window.google.maps.DirectionsService();

    const directionsRequest = {
      origin,
      destination,
      travelMode: 'DRIVING',
    };

    directionsService.route(directionsRequest, (result, status) => {
      if (status === 'OK') {
        setDirections(result);
      } else {
        console.error('Directions request failed:', status);
      }
    });
  };

  useEffect(() => {
    if (map && userLocation && selectedHotel) {
      calculateDirections(userLocation, selectedHotel.location);
    }
  }, [map, userLocation, selectedHotel]);

  // useEffect(() => {
  //   // Simulated geolocation coordinates, replace with actual tracking
  //   const simulatedLocation = { lat: 27.65972610005083, lng: 85.43948057458333 };
  //   setUserLocation(simulatedLocation); // Replace this with your actual geolocation code
  // }, []);

  useEffect(() => {
    if (navigator.geolocation) {
      const watchId = navigator.geolocation.watchPosition(
        position => {
          const { latitude, longitude } = position.coords;
          setUserLocation({ lat: latitude, lng: longitude });
        },
        error => {
          console.error('Error getting user location:', error);
        }
      );
  
      return () => {
        // Cleanup: Stop watching for changes when the component unmounts
        navigator.geolocation.clearWatch(watchId);
      };
    } else {
      console.error('Geolocation is not available in this browser.');
    }
  }, []);

  const handleHotelChange = event => {
    const selectedHotelName = event.target.value;
    const hotel = hotels.find(h => h.name === selectedHotelName);
    setSelectedHotel(hotel);
  };

  return (
    <LoadScript googleMapsApiKey="AIzaSyD9T7Iz3AHsGMeGNprGoIojX6CHfbuF4EE">
      <div>
        <label htmlFor="hotelSelect">EVSTATION'S: </label>
        <select id="hotelSelect" onChange={handleHotelChange}>
          <option value="">SELECT A EV STATION </option>
          {hotels.map(hotel => (
            <option key={hotel.name} value={hotel.name}>
              {hotel.name}
            </option>
          ))}
        </select>
      </div>
      <GoogleMap
        mapContainerStyle={containerStyle}
        center={center}
        zoom={7}
        onLoad={onMapLoad}
      >
        {userLocation && <Marker position={userLocation} title="Your Location" />}
        {hotels.map((hotel, index) => (
          <Marker key={index} position={hotel.location} title={hotel.name} />
        ))}

        {directions && <DirectionsRenderer directions={directions} />}
      </GoogleMap>
    </LoadScript>
  );
}

export default NepalMap;
















  import React, { useState, useEffect } from 'react';
  import { GoogleMap, LoadScript, Marker, DirectionsService, DirectionsRenderer } from '@react-google-maps/api';
import './Nepalmap.css'
  const containerStyle = {
    width: '100%',
    height: '650px',
  };

  const center = {
    lat: 28.3949,
    lng: 84.1240,
  };

  const hotels = [
    { name: 'EV-APLHA CHARGING SPORT', location: { lat: 27.7075, lng: 85.3202 } },
    { name: 'EV-BBC CHARGING SPORT', location: { lat: 27.6724, lng: 85.4250 } },
    { name: 'EV-MAHAD CHARGING SPORT', location: { lat: 27.6707, lng: 85.3622 } },
    { name: 'EV-CORE CHARGING SPORT', location: { lat: 27.6726, lng: 85.4278 } },
    { name: 'EV-ASTAPUR CHARGING SPORT', location: { lat: 27.6728, lng: 85.4256 } },
    { name: 'EV-RAITNE CHARGING SPORT', location: { lat: 27.6729, lng: 85.4223 } },
    // Add more hotel locations here
  ];

  function NepalMap() {
    const [map, setMap] = useState(null);
    const [directions, setDirections] = useState(null);
    const [userLocation, setUserLocation] = useState(null);
    const [selectedHotel, setSelectedHotel] = useState(null);

    const onMapLoad = mapInstance => {
      setMap(mapInstance);
    };



    const userIcon = {
      url: '/path_to_user_icon.svg', // Replace with actual path
      scaledSize: new window.google.maps.Size(40, 40),
    };

    const evStationIcon = {
      url: '/path_to_ev_station_icon.svg', // Replace with actual path
      scaledSize: new window.google.maps.Size(40, 40),
    };

    const calculateDirections = (origin, destination) => {
      const directionsService = new window.google.maps.DirectionsService();

      const directionsRequest = {
        origin,
        destination,
        travelMode: 'DRIVING',
      };

      directionsService.route(directionsRequest, (result, status) => {
        if (status === 'OK') {
          setDirections(result);
        } else {
          console.error('Directions request failed:', status);
        }
      });
    };

    useEffect(() => {
      if (map && userLocation && selectedHotel) {
        calculateDirections(userLocation, selectedHotel.location);
      }
    }, [map, userLocation, selectedHotel]);

    // useEffect(() => {
    //   // Simulated geolocation coordinates, replace with actual tracking
    //   const simulatedLocation = { lat: 27.65972610005083, lng: 85.43948057458333 };
    //   setUserLocation(simulatedLocation); // Replace this with your actual geolocation code
    // }, []);

    useEffect(() => {
      if (navigator.geolocation) {
        const watchId = navigator.geolocation.watchPosition(
          position => {
            const { latitude, longitude } = position.coords;
            setUserLocation({ lat: latitude, lng: longitude });
          },
          error => {
            console.error('Error getting user location:', error);
          }
        );
    
        return () => {
          // Cleanup: Stop watching for changes when the component unmounts
          navigator.geolocation.clearWatch(watchId);
        };
      } else {
        console.error('Geolocation is not available in this browser.');
      }
    }, []);

    const handleHotelChange = event => {
      const selectedHotelName = event.target.value;
      const hotel = hotels.find(h => h.name === selectedHotelName);
      setSelectedHotel(hotel);
    };

    return (
      <LoadScript googleMapsApiKey="AIzaSyD9T7Iz3AHsGMeGNprGoIojX6CHfbuF4EE">
        <div>
          <label htmlFor="hotelSelect">EVSTATION'S: </label>
          <select id="hotelSelect" onChange={handleHotelChange}>
            <option value="">SELECT A EV STATION </option>
            {hotels.map(hotel => (
              <option key={hotel.name} value={hotel.name}>
                {hotel.name}
              </option>
            ))}
          </select>
        </div>
        <GoogleMap
          mapContainerStyle={containerStyle}
          center={center}
          zoom={7}
          onLoad={onMapLoad}
        >
          {userLocation && (
            <Marker
              position={userLocation}
              title="Your Location"
              icon={userIcon}
            />
          )}
          {hotels.map((hotel, index) => (
            <Marker
              key={index}
              position={hotel.location}
              title={hotel.name}
              icon={evStationIcon}
              label={{
                text: hotel.name,
                color: '#ffffff',
              }}
            />
          ))}
          {directions && <DirectionsRenderer directions={directions} />}
        </GoogleMap>
      </LoadScript>
    );
  }

  export default NepalMap;
